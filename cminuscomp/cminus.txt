-----------------------------
---------- Grammar ----------
-----------------------------
x 1.  program -> decl {decl}

x 2.  decl     -> void ID ( params ) compound-stmt | int ID decl2
x 3.  decl2    -> ; | '[' NUM ']' ; | ( params ) compound-stmt

x 4.  params -> param {, param} | void
x 5.  param  -> int ID [ '[' ']' ]

x 6.  compound-stmt -> '{' local-declarations stmt-list '}'
x 7.  local-declarations -> {decl}
x 8.  stmt-list -> {stmt}

x 9.  stmt            -> expr-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
x 10. expr-stmt       -> expr ; | ;
x 11. selection-stmt  -> if ( expr ) stmt [else stmt]
x 12. iteration-stmt  -> while ( expr ) stmt
x 13. return-stmt     -> return [expr] ;

x 14. expr  -> ID expr2 | ( expr ) simple-expr | NUM simple-expr
x 15. expr2 -> '[' expr ']' expr3 | ( args ) simple-expr | expr3
x 16. expr3 -> = expr | simple-expr
x 17. simple-expr -> additive-expr2 [relop additive-expr]

x 18. relop -> <= | < | > | >= | == | !=

x 19. additive-expr -> term {addop term}
x 20. additive-expr2-> term2 {addop term}
x 21. addop         -> + | -
x 22. term          -> factor {mulop factor}
x 23. term2         -> {mulop factor}
x 24. mulop         -> * | /
x 25. factor        -> ( expr ) | ID factor2 | NUM
x 26. factor2       -> '[' expr ']' | ( args ) | EPSILON

x 27. args -> expr {, expr} | EPSILON

-----------------------------
-------- First sets ---------
-----------------------------
FIRST(program) = {void, int}
FIRST(decl) = {void, int}
FIRST(decl2) = {;, [, (}
FIRST(params) = {int, void}
FIRST(param) = {int}
FIRST(param2) = {[, epsilon}
FIRST(compound-stmt) = {'{'}
FIRST(local-declarations) = {void, int, epsilon}
FIRST(stmt-list) = {if, while, return, epsilon}
FIRST(stmt) = {if, while, return, ;, ID, (, NUM}
FIRST(expr-stmt) = {;, ID, (, NUM}
FIRST(selection-stmt) = {if}
FIRST(iteration-stmt) = {while}
FIRST(return-stmt) = {return}
FIRST(return-stmt2) = {;, ID, (, NUM}
FIRST(expr) = {ID, (, NUM}
FIRST(expr2) = {[, (, =, *, /, epsilon}
FIRST(expr3) = {=, *, /, epsilon}
FIRST(simple-expr) = {*, /, epsilon}
FIRST(relop) = {<=, <, >, >=, ==, !=}
FIRST(additive-expr) = {(, ID, NUM}
FIRST(additive-expr2) = {*, /, epsilon}
FIRST(addop) = {+, -}
FIRST(term) = {(, ID, NUM}
FIRST(term2) = {*, /, epsilon}
FIRST(mulop) = {*, /}
FIRST(factor) = {(, ID, NUM}
FIRST(factor2) = {[, (, epsilon}
FIRST(args) = {ID, (, NUM, epsilon}

-----------------------------
------- Follow sets ---------
-----------------------------
FOLLOW(program) = {$}
FOLLOW(decl) = {$, void, int, if, while, return}
FOLLOW(decl2) = {$, void, int, if, while, return}
FOLLOW(params) = {)}
FOLLOW(param) = {, )}
FOLLOW(param2) = {, )}
FOLLOW(compound-stmt) = {$, void, int, if, while, return, '}', '{', ;, ID, (, NUM}
FOLLOW(local-declarations) = {if, while, return, '}'}
FOLLOW(stmt-list) = {'}'}
FOLLOW(stmt) = {'}', '{', ;, ID, (, NUM, if, while, return}
FOLLOW(expr-stmt) = {'}', '{', ;, ID, (, NUM, if, while, return}
FOLLOW(selection-stmt) = {'}', '{', ;, ID, (, NUM, if, while, return}
FOLLOW(iteration-stmt) = {'}', '{', ;, ID, (, NUM, if, while, return}
FOLLOW(return-stmt) = {;, ID, (, NUM}}
FOLLOW(return-stmt2) = {'}', '{', ;, ID, (, NUM, if, while, return}
FOLLOW(expr) = {;, )}
FOLLOW(expr2) = {;, )}
FOLLOW(expr3) = {;, )}
FOLLOW(simple-expr) = {;, )}
FOLLOW(relop) = {(, ID, NUM}
FOLLOW(additive-expr) = {;, )}
FOLLOW(additive-expr2) = {;, ), <=, <, >, >=, ==, !=}
FOLLOW(addop) = {(, ID, NUM}
FOLLOW(term) = {;, ), <=, <, >, >=, ==, !=, +, -}
FOLLOW(term2) = {;, ), <=, <, >, >=, ==, !=, +, -}
FOLLOW(mulop) = {(, ID, NUM}
FOLLOW(factor) = {;, ), <=, <, >, >=, ==, !=, +, -}
FOLLOW(factor2) = {;, ), <=, <, >, >=, ==, !=, +, -}
FOLLOW(args) = {)}