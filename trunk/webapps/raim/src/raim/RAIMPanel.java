package raim;

import java.sql.Time;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;

/**
 * The main class which contains the main window and chat dialog of the RAIM
 * application.  This panel is versatile in that it can be constructed with
 * either a JFrame or a JApplet.
 *
 * @author Alex Laird
 * @author Ryan Morehart
 * @version 0.1
 */
public class RAIMPanel extends JPanel
		implements RAIMAPILogonHandler, RAIMAPIMessageHandler, RAIMAPIBuddyHandler
{
	/** The main form of the GUI, if it is stand-alone and not applet-based.*/
	private RAIMFrame mainFrame;
	/** The main form of the GUI, if it is the applet-based application.*/
	private RAIMApplet mainApplet;
	/** Default chatters list model*/
	private DefaultListModel chattersListModel;
	/** Vector of chat sessions used to sort chat messages */
	private Vector<RAIMChatSession> chatSessions = new Vector<RAIMChatSession>();
	/** The tabbed pane that holds the chat windows.*/
	private RAIMClosable chatTabbedPane;
	/** Our connection to the server */
	private RAIMClientAPI api;
	/** Current list of people online at any given time */
	private Vector<String> chatters = new Vector<String>();
	/** List of messages yet to be seen */
	private Vector<RAIMChatMessage> newMessages = new Vector<RAIMChatMessage>();

	/**
	 * Constructs the interface for RAIM, knowing the application
	 * is stand-alone.
	 *
	 * @param mainFrame The frame for the stand-alone application.
	 */
	public RAIMPanel(RAIMFrame mainFrame)
	{
		this.mainFrame = mainFrame;
		chattersListModel = new DefaultListModel();
		initComponents();
		initMyComponents();
	}

	/**
	 * Constructs the interface for RAIM, knowing the application
	 * is applet-based.
	 *
	 * @param mainApplet The container for the applet-based application.
	 */
	public RAIMPanel(RAIMApplet mainApplet)
	{
		this.mainApplet = mainApplet;
		chattersListModel = new DefaultListModel();
		initComponents();
		initMyComponents();
	}

	/**
	 * Manual initialization of components is done here.
	 */
	private void initMyComponents()
	{
		// set container attributes
		setLocation(50, 50);

		// pack the dialog
		chatDialog.pack();

		// init chat tab stuff
		chatTabbedPane = new RAIMClosable();
		chatTabPanel.remove(chatTabbedPane);
		chatTabPanel.add(chatTabbedPane);
		chatTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

		// init cards and sql connection
		loginPanel.setVisible(true);
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(false);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatDialog = new javax.swing.JDialog();
        chatTabPanel = new javax.swing.JPanel();
        editProfilePanel = new javax.swing.JPanel();
        newPasswordLabel = new javax.swing.JLabel();
        retypeNewPasswordLabel = new javax.swing.JLabel();
        currentPasswordTextField = new javax.swing.JPasswordField();
        retypeNewPasswordTextField = new javax.swing.JPasswordField();
        saveChangesButton = new javax.swing.JButton();
        cancelPasswordChangeButton = new javax.swing.JButton();
        currentPasswordLabel = new javax.swing.JLabel();
        newPasswordTextField = new javax.swing.JPasswordField();
        editProfileLabel = new javax.swing.JLabel();
        changePasswordSeparator1 = new javax.swing.JSeparator();
        editProfileStatusTextField = new javax.swing.JTextField();
        changePasswordSeparator2 = new javax.swing.JSeparator();
        buddyListPanel = new javax.swing.JPanel();
        logoutButton = new javax.swing.JButton();
        editProfileButton = new javax.swing.JButton();
        chattersScrollPane = new javax.swing.JScrollPane();
        chattersList = new javax.swing.JList();
        chatButton = new javax.swing.JButton();
        loggedInUsernameLabel = new javax.swing.JLabel();
        connectSeparator1 = new javax.swing.JSeparator();
        registerPanel = new javax.swing.JPanel();
        registerUsernameLabel = new javax.swing.JLabel();
        registerPasswordLabel = new javax.swing.JLabel();
        registerRetypePasswordLabel = new javax.swing.JLabel();
        registerUsernameTextField = new javax.swing.JTextField();
        registerPasswordTextField = new javax.swing.JPasswordField();
        retypeRegisterPasswordTextField = new javax.swing.JPasswordField();
        cancelRegisterButton = new javax.swing.JButton();
        registerMeButton = new javax.swing.JButton();
        registerStatusTextField = new javax.swing.JTextField();
        registerSeparator1 = new javax.swing.JSeparator();
        registerLabel = new javax.swing.JLabel();
        registerSeparator2 = new javax.swing.JSeparator();
        loginPanel = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        newUserButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        logingLabel = new javax.swing.JLabel();
        loginSeparator1 = new javax.swing.JSeparator();
        loginStatusTextField = new javax.swing.JTextField();
        loginSeparator2 = new javax.swing.JSeparator();

        chatDialog.setTitle("RAIM Chat");
        chatDialog.setName("chatDialog"); // NOI18N
        chatDialog.setResizable(false);
        chatDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                chatDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        chatDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                chatDialogWindowDeactivated(evt);
            }
        });
        chatDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chatTabPanel.setLayout(new java.awt.BorderLayout());
        chatDialog.getContentPane().add(chatTabPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 350));

        setName("mainPanel"); // NOI18N
        setLayout(new java.awt.CardLayout());

        editProfilePanel.setOpaque(false);
        editProfilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        newPasswordLabel.setText("New Password");
        editProfilePanel.add(newPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        retypeNewPasswordLabel.setText("Retype New Password");
        editProfilePanel.add(retypeNewPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        currentPasswordTextField.setNextFocusableComponent(newPasswordTextField);
        currentPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPasswordTextFieldActionPerformed(evt);
            }
        });
        currentPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                currentPasswordTextFieldFocusGained(evt);
            }
        });
        currentPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                currentPasswordTextFieldKeyPressed(evt);
            }
        });
        editProfilePanel.add(currentPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 200, -1));

        retypeNewPasswordTextField.setNextFocusableComponent(saveChangesButton);
        retypeNewPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retypeNewPasswordTextFieldActionPerformed(evt);
            }
        });
        retypeNewPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                retypeNewPasswordTextFieldFocusGained(evt);
            }
        });
        retypeNewPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                retypeNewPasswordTextFieldKeyPressed(evt);
            }
        });
        editProfilePanel.add(retypeNewPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 200, -1));

        saveChangesButton.setText("Save Changes");
        saveChangesButton.setToolTipText("Change your default password");
        saveChangesButton.setEnabled(false);
        saveChangesButton.setNextFocusableComponent(cancelPasswordChangeButton);
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });
        editProfilePanel.add(saveChangesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 220, -1));

        cancelPasswordChangeButton.setText("Cancel");
        cancelPasswordChangeButton.setToolTipText("Cancel password changing");
        cancelPasswordChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPasswordChangeButtonActionPerformed(evt);
            }
        });
        editProfilePanel.add(cancelPasswordChangeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 100, -1));

        currentPasswordLabel.setText("Current Password");
        editProfilePanel.add(currentPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        newPasswordTextField.setNextFocusableComponent(retypeNewPasswordTextField);
        newPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordTextFieldActionPerformed(evt);
            }
        });
        newPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newPasswordTextFieldFocusGained(evt);
            }
        });
        newPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newPasswordTextFieldKeyPressed(evt);
            }
        });
        editProfilePanel.add(newPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 200, -1));

        editProfileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        editProfileLabel.setText("Edit RAIM Profile");
        editProfilePanel.add(editProfileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        editProfilePanel.add(changePasswordSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 220, -1));

        editProfileStatusTextField.setEditable(false);
        editProfilePanel.add(editProfileStatusTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 220, -1));
        editProfilePanel.add(changePasswordSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 220, 10));

        add(editProfilePanel, "card4");

        buddyListPanel.setOpaque(false);
        buddyListPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoutButton.setText("Logout");
        logoutButton.setToolTipText("Logout of RAIM");
        logoutButton.setNextFocusableComponent(saveChangesButton);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        buddyListPanel.add(logoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 90, -1));

        editProfileButton.setText("Edit Profile");
        editProfileButton.setToolTipText("Change your default password");
        editProfileButton.setNextFocusableComponent(chattersList);
        editProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProfileButtonActionPerformed(evt);
            }
        });
        buddyListPanel.add(editProfileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 220, -1));

        chattersList.setModel(chattersListModel);
        chattersList.setToolTipText("Select a user to chat, play a game, or load a past game with");
        chattersList.setNextFocusableComponent(chatButton);
        chattersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chattersListValueChanged(evt);
            }
        });
        chattersScrollPane.setViewportView(chattersList);

        buddyListPanel.add(chattersScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 220, 210));

        chatButton.setText("Chat");
        chatButton.setToolTipText("Chat with the currently selected user");
        chatButton.setEnabled(false);
        chatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatButtonActionPerformed(evt);
            }
        });
        buddyListPanel.add(chatButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 220, -1));

        loggedInUsernameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        loggedInUsernameLabel.setText("RAIM - Username");
        buddyListPanel.add(loggedInUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        buddyListPanel.add(connectSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 220, 10));

        add(buddyListPanel, "card5");

        registerPanel.setOpaque(false);
        registerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        registerUsernameLabel.setText("New Username");
        registerPanel.add(registerUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        registerPasswordLabel.setText("Chooser Password");
        registerPanel.add(registerPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        registerRetypePasswordLabel.setText("Retype Password");
        registerPanel.add(registerRetypePasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        registerUsernameTextField.setNextFocusableComponent(registerPasswordTextField);
        registerUsernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerUsernameTextFieldActionPerformed(evt);
            }
        });
        registerUsernameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                registerUsernameTextFieldFocusGained(evt);
            }
        });
        registerUsernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                registerUsernameTextFieldKeyPressed(evt);
            }
        });
        registerPanel.add(registerUsernameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 200, -1));

        registerPasswordTextField.setNextFocusableComponent(retypeRegisterPasswordTextField);
        registerPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerPasswordTextFieldActionPerformed(evt);
            }
        });
        registerPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                registerPasswordTextFieldFocusGained(evt);
            }
        });
        registerPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                registerPasswordTextFieldKeyPressed(evt);
            }
        });
        registerPanel.add(registerPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 200, -1));

        retypeRegisterPasswordTextField.setNextFocusableComponent(registerMeButton);
        retypeRegisterPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retypeRegisterPasswordTextFieldActionPerformed(evt);
            }
        });
        retypeRegisterPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                retypeRegisterPasswordTextFieldFocusGained(evt);
            }
        });
        retypeRegisterPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                retypeRegisterPasswordTextFieldKeyPressed(evt);
            }
        });
        registerPanel.add(retypeRegisterPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 200, -1));

        cancelRegisterButton.setText("Cancel");
        cancelRegisterButton.setToolTipText("Cancel registration and return to login");
        cancelRegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRegisterButtonActionPerformed(evt);
            }
        });
        registerPanel.add(cancelRegisterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 90, -1));

        registerMeButton.setText("Register Me");
        registerMeButton.setToolTipText("Register your new username");
        registerMeButton.setEnabled(false);
        registerMeButton.setNextFocusableComponent(cancelRegisterButton);
        registerMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMeButtonActionPerformed(evt);
            }
        });
        registerPanel.add(registerMeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 220, -1));

        registerStatusTextField.setEditable(false);
        registerPanel.add(registerStatusTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 220, -1));
        registerPanel.add(registerSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 220, 10));

        registerLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        registerLabel.setText("Register New User");
        registerPanel.add(registerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        registerPanel.add(registerSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 220, 10));

        add(registerPanel, "card3");

        loginPanel.setOpaque(false);
        loginPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        usernameLabel.setText("Username");
        loginPanel.add(usernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        passwordLabel.setText("Password");
        loginPanel.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        usernameTextField.setNextFocusableComponent(passwordTextField);
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });
        usernameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameTextFieldFocusGained(evt);
            }
        });
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyPressed(evt);
            }
        });
        loginPanel.add(usernameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 200, -1));

        passwordTextField.setNextFocusableComponent(loginButton);
        passwordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextFieldActionPerformed(evt);
            }
        });
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusGained(evt);
            }
        });
        passwordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordTextFieldKeyPressed(evt);
            }
        });
        loginPanel.add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 200, -1));

        newUserButton.setText("New User");
        newUserButton.setToolTipText("Register a new username");
        newUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUserButtonActionPerformed(evt);
            }
        });
        loginPanel.add(newUserButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 110, -1));

        loginButton.setText("Login");
        loginButton.setToolTipText("Login to RAIM");
        loginButton.setEnabled(false);
        loginButton.setNextFocusableComponent(newUserButton);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginPanel.add(loginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 220, -1));

        logingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        logingLabel.setText("Login to RAIM!");
        loginPanel.add(logingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        loginPanel.add(loginSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 220, 10));

        loginStatusTextField.setEditable(false);
        loginPanel.add(loginStatusTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 220, -1));
        loginPanel.add(loginSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 220, 10));

        add(loginPanel, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void chatDialogWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_chatDialogWindowDeactivated
		requestFocus();
    }//GEN-LAST:event_chatDialogWindowDeactivated

    private void newUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUserButtonActionPerformed
		registerUsernameTextField.setText("");
		registerPasswordTextField.setText("");
		retypeRegisterPasswordTextField.setText("");

		registerStatusTextField.setText("Create a new user");
		registerPanel.setVisible(true);
		loginPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(false);
		registerUsernameTextField.requestFocus();
    }//GEN-LAST:event_newUserButtonActionPerformed

    private void cancelRegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRegisterButtonActionPerformed
		loginPanel.setVisible(true);
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(false);
    }//GEN-LAST:event_cancelRegisterButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
		login();
		chattersList.requestFocus();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void registerMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMeButtonActionPerformed
		// Validate the user input first and if everything looks good
		// then submit the new user to the database

		String newPassword = String.valueOf(registerPasswordTextField.getPassword());
		String retypedPassword = String.valueOf(retypeRegisterPasswordTextField.getPassword());

		registerStatusTextField.setText("Unable to register");

		if(registerUsernameTextField.getText().length() > 0
				&& newPassword.length() > 5
				&& newPassword.equals(retypedPassword))
		{
				api.createUser(registerUsernameTextField.getText(), newPassword);

				loginStatusTextField.setText("Created user " + registerUsernameTextField.getText());
				loginPanel.setVisible(true);
				registerPanel.setVisible(false);
				buddyListPanel.setVisible(false);
				editProfilePanel.setVisible(false);
		}
		else
		{
			registerStatusTextField.setText("Invalid password");
		}
    }//GEN-LAST:event_registerMeButtonActionPerformed

    private void registerPasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_registerPasswordTextFieldKeyPressed
		if(registerPasswordTextField.getPassword() != null && registerPasswordTextField.getPassword().length >= 5
				&& retypeRegisterPasswordTextField.getPassword() != null && retypeRegisterPasswordTextField.getPassword().length >= 5
				&& registerUsernameTextField.getText() != null && registerUsernameTextField.getText().length() >= 5)
		{
			registerMeButton.setEnabled(true);
		}
		else
		{
			registerMeButton.setEnabled(false);
		}
    }//GEN-LAST:event_registerPasswordTextFieldKeyPressed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
		String oldPassword = String.valueOf(currentPasswordTextField.getPassword());
		String newPassword = String.valueOf(newPasswordTextField.getPassword());
		String retypeNewPassword = String.valueOf(retypeNewPasswordTextField.getPassword());
		editProfileStatusTextField.setText("Unable to save profile");
		/*
		try
		{
			String storedPassword = sqlConnection.getPassword(usernameTextField.getText());
			MessageDigest md;
			try
			{
				md = MessageDigest.getInstance("SHA");
				md.reset();
				md.update(oldPassword.getBytes());
				String encryptedPassword = raim.RAIMUtility.byteArrayToHexString(md.digest());

				if(storedPassword.equals(encryptedPassword)
						&& newPassword.equals(retypeNewPassword))
				{
					md = MessageDigest.getInstance("SHA");
					md.reset();
					md.update(newPassword.getBytes());
					String newEncryptedPassword = raim.RAIMUtility.byteArrayToHexString(md.digest());
					sqlConnection.setPassword(usernameTextField.getText(), newEncryptedPassword);

					loginPanel.setVisible(false);
					registerPanel.setVisible(false);
					editProfilePanel.setVisible(false);
					buddyListPanel.setVisible(true);
					chattersList.requestFocus();
				}
				else
				{
					if(newPassword.equals(retypeNewPassword))
					{
						editProfileStatusTextField.setText("Invalid password");
					}
					else
					{
						editProfileStatusTextField.setText("Password mismatch");
					}
				}
			}
			catch(NoSuchAlgorithmException ex)
			{
			}
		}
		catch(SQLException ex)
		{
			editProfileStatusTextField.setText("Unable to save profile");
		}
		*/
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void cancelPasswordChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPasswordChangeButtonActionPerformed
		loginPanel.setVisible(false);
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(true);
		chattersList.requestFocus();
    }//GEN-LAST:event_cancelPasswordChangeButtonActionPerformed

    private void newPasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newPasswordTextFieldKeyPressed
		if(currentPasswordTextField.getPassword() != null && currentPasswordTextField.getPassword().length >= 5
				&& newPasswordTextField.getPassword() != null && newPasswordTextField.getPassword().length >= 5
				&& retypeNewPasswordTextField.getPassword() != null && retypeNewPasswordTextField.getPassword().length >= 5)
		{
			saveChangesButton.setEnabled(true);
		}
		else
		{
			saveChangesButton.setEnabled(false);
		}
    }//GEN-LAST:event_newPasswordTextFieldKeyPressed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
		// Update server with logout information and update
		// buttons
		api.logout();

		loginStatusTextField.setText("Logged " + usernameTextField.getText() + " out");
		loginButton.setEnabled(false);
		loginPanel.setVisible(true);
		usernameTextField.requestFocus();
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(false);

		chatDialog.setVisible(false);
		initMyComponents();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void editProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProfileButtonActionPerformed
		currentPasswordTextField.setText("");
		newPasswordTextField.setText("");
		retypeNewPasswordTextField.setText("");
		editProfileStatusTextField.setText("Edit " + usernameTextField.getText());

		loginPanel.setVisible(false);
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(true);
		buddyListPanel.setVisible(false);
		saveChangesButton.setEnabled(false);

		currentPasswordTextField.requestFocus();
    }//GEN-LAST:event_editProfileButtonActionPerformed

    private void chatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatButtonActionPerformed
		if(chattersList.getSelectedIndex() != -1)
		{
			// Show chat window
			chatDialog.setLocation(getX() + 500, getY() + 250);
			chatDialog.setVisible(true);
			// Add user to chat if he wasn't there, otherwise bring tab to front
			addChatTab(chattersList.getSelectedValue().toString());
		}
    }//GEN-LAST:event_chatButtonActionPerformed

    private void passwordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextFieldActionPerformed
		if(loginButton.isEnabled())
		{
			login();
		}
    }//GEN-LAST:event_passwordTextFieldActionPerformed

    private void chattersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chattersListValueChanged
		if(chattersList.getSelectedIndex() != -1)
		{
			chatButton.setEnabled(true);
		}
		else
		{
			chatButton.setEnabled(false);
		}
    }//GEN-LAST:event_chattersListValueChanged

    private void retypeRegisterPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retypeRegisterPasswordTextFieldActionPerformed
		if(registerMeButton.isEnabled())
		{
			registerMeButtonActionPerformed(evt);
		}
}//GEN-LAST:event_retypeRegisterPasswordTextFieldActionPerformed

    private void retypeRegisterPasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_retypeRegisterPasswordTextFieldKeyPressed
		if(registerPasswordTextField.getPassword() != null && registerPasswordTextField.getPassword().length >= 5
				&& retypeRegisterPasswordTextField.getPassword() != null && retypeRegisterPasswordTextField.getPassword().length >= 5
				&& registerUsernameTextField.getText() != null && registerUsernameTextField.getText().length() >= 5)
		{
			registerMeButton.setEnabled(true);
		}
		else
		{
			registerMeButton.setEnabled(false);
		}
    }//GEN-LAST:event_retypeRegisterPasswordTextFieldKeyPressed

    private void registerUsernameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_registerUsernameTextFieldKeyPressed
		if(registerPasswordTextField.getPassword() != null && registerPasswordTextField.getPassword().length >= 5
				&& retypeRegisterPasswordTextField.getPassword() != null && retypeRegisterPasswordTextField.getPassword().length >= 5
				&& registerUsernameTextField.getText() != null && registerUsernameTextField.getText().length() >= 5)
		{
			registerMeButton.setEnabled(true);
		}
		else
		{
			registerMeButton.setEnabled(false);
		}
    }//GEN-LAST:event_registerUsernameTextFieldKeyPressed

    private void passwordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordTextFieldKeyPressed
		if(usernameTextField.getText() != null && usernameTextField.getText().length() >= 5
				&& passwordTextField.getPassword() != null && passwordTextField.getPassword().length >= 5)
		{
			loginButton.setEnabled(true);
		}
		else
		{
			loginButton.setEnabled(false);
		}
    }//GEN-LAST:event_passwordTextFieldKeyPressed

    private void usernameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyPressed
		if(passwordTextField.getPassword() != null && passwordTextField.getPassword().length >= 5
				&& usernameTextField.getText() != null && usernameTextField.getText().length() >= 5)
		{
			loginButton.setEnabled(true);
		}
		else
		{
			loginButton.setEnabled(false);
		}
    }//GEN-LAST:event_usernameTextFieldKeyPressed

    private void retypeNewPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retypeNewPasswordTextFieldActionPerformed
		if(saveChangesButton.isEnabled())
		{
			saveChangesButtonActionPerformed(evt);
		}
    }//GEN-LAST:event_retypeNewPasswordTextFieldActionPerformed

    private void currentPasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentPasswordTextFieldKeyPressed
		if(currentPasswordTextField.getPassword() != null && currentPasswordTextField.getPassword().length >= 5
				&& newPasswordTextField.getPassword() != null && newPasswordTextField.getPassword().length >= 5
				&& retypeNewPasswordTextField.getPassword() != null && retypeNewPasswordTextField.getPassword().length >= 5)
		{
			saveChangesButton.setEnabled(true);
		}
		else
		{
			saveChangesButton.setEnabled(false);
		}
    }//GEN-LAST:event_currentPasswordTextFieldKeyPressed

    private void retypeNewPasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_retypeNewPasswordTextFieldKeyPressed
		if(currentPasswordTextField.getPassword() != null && currentPasswordTextField.getPassword().length >= 5
				&& newPasswordTextField.getPassword() != null && newPasswordTextField.getPassword().length >= 5
				&& retypeNewPasswordTextField.getPassword() != null && retypeNewPasswordTextField.getPassword().length >= 5)
		{
			saveChangesButton.setEnabled(true);
		}
		else
		{
			saveChangesButton.setEnabled(false);
		}
    }//GEN-LAST:event_retypeNewPasswordTextFieldKeyPressed

    private void currentPasswordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_currentPasswordTextFieldFocusGained
		currentPasswordTextField.selectAll();
    }//GEN-LAST:event_currentPasswordTextFieldFocusGained

    private void newPasswordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPasswordTextFieldFocusGained
		newPasswordTextField.selectAll();
    }//GEN-LAST:event_newPasswordTextFieldFocusGained

    private void retypeNewPasswordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_retypeNewPasswordTextFieldFocusGained
		retypeNewPasswordTextField.selectAll();
    }//GEN-LAST:event_retypeNewPasswordTextFieldFocusGained

    private void usernameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameTextFieldFocusGained
		usernameTextField.selectAll();
    }//GEN-LAST:event_usernameTextFieldFocusGained

    private void passwordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusGained
		passwordTextField.selectAll();
    }//GEN-LAST:event_passwordTextFieldFocusGained

    private void registerUsernameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_registerUsernameTextFieldFocusGained
		registerUsernameTextField.selectAll();
    }//GEN-LAST:event_registerUsernameTextFieldFocusGained

    private void registerPasswordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_registerPasswordTextFieldFocusGained
		registerPasswordTextField.selectAll();
    }//GEN-LAST:event_registerPasswordTextFieldFocusGained

    private void retypeRegisterPasswordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_retypeRegisterPasswordTextFieldFocusGained
		retypeRegisterPasswordTextField.selectAll();
    }//GEN-LAST:event_retypeRegisterPasswordTextFieldFocusGained

    private void chatDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_chatDialogWindowGainedFocus
		try
		{
			((RAIMChatTabPanel) chatTabbedPane.getSelectedComponent()).typingTextArea.requestFocus();
		}
		catch(NullPointerException ex)
		{
		}
    }//GEN-LAST:event_chatDialogWindowGainedFocus

    private void registerUsernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerUsernameTextFieldActionPerformed
		if(registerMeButton.isEnabled())
		{
			registerMeButtonActionPerformed(evt);
		}
    }//GEN-LAST:event_registerUsernameTextFieldActionPerformed

    private void registerPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerPasswordTextFieldActionPerformed
		if(registerMeButton.isEnabled())
		{
			registerMeButtonActionPerformed(evt);
		}
    }//GEN-LAST:event_registerPasswordTextFieldActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
		if(loginButton.isEnabled())
		{
			login();
			chattersList.requestFocus();
		}
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void currentPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPasswordTextFieldActionPerformed
		if(saveChangesButton.isEnabled())
		{
			saveChangesButtonActionPerformed(evt);
		}
    }//GEN-LAST:event_currentPasswordTextFieldActionPerformed

    private void newPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordTextFieldActionPerformed
		if(saveChangesButton.isEnabled())
		{
			saveChangesButtonActionPerformed(evt);
		}
    }//GEN-LAST:event_newPasswordTextFieldActionPerformed

	/**
	 * Returns the RAIMClientAPI this panel is using
	 * @return connection to server
	 */
	public RAIMClientAPI getAPI()
	{
		return api;
	}

	/**
	 * Return the current list of buddies online
	 * @return list of buddies
	 */
	public Vector<String> getChatters()
	{
		return chatters;
	}

	/**
	 * Refreshes the list of available chatters.
	 */
	public void updateAvailableChatters()
	{
		boolean changed = false;
		String previouslySelectedObject = "";

		if(chattersList.getSelectedIndex() != -1)
		{
			previouslySelectedObject = chattersList.getSelectedValue().toString();
		}

		for(int i = 0; i < chatters.size(); i++)
		{
			if(!chatters.get(i).equals(usernameTextField.getText()))
			{
				if(!chattersListModel.contains(chatters.get(i)))
				{
					// Check to see if there was a chat session with this guy
					for(int j = 0; j < chatSessions.size(); j++)
					{
						if(chatters.get(i).equals(chatSessions.get(j).chattingWith()))
						{
							addMessageFromUser("Info",
									chatSessions.get(j).chattingWith(),
									chatSessions.get(j).chattingWith() + " has logged back in");
						}
					}

					chattersListModel.add(0, chatters.get(i));
					changed = true;
				}
			}
		}

		for(int i = 0; i < chattersListModel.getSize(); i++)
		{
			if(!chatters.contains(chattersListModel.get(i).toString()))
			{
				// Check to see if there was a chat session with this guy
				for(int j = 0; j < chatSessions.size(); j++)
				{
					if(chattersListModel.get(i).toString().equals(
							chatSessions.get(j).chattingWith()))
					{
						addMessageFromUser("Info", chatSessions.get(j).chattingWith(), chatSessions.get(
								j).chattingWith() + " has logged out");
					}
				}

				chattersListModel.remove(i);
				changed = true;
			}
		}

		if(changed && !previouslySelectedObject.equals(""))
		{
			chattersList.setSelectedValue(previouslySelectedObject, true);
		}
	}

	/**
	 * Pings to see if any unread messages are available on the server.
	 */
	public void checkForNewMessages()
	{
		for(int i = 0; i < chatSessions.size(); i++)
		{
			chatSessions.get(i).resetNewMessages();
		}

		for(int i = 0; i < newMessages.size(); i++)
		{
			boolean found = false;

			for(int j = 0; !found && j < chatSessions.size(); j++)
			{
				if(chatSessions.get(j).chattingWith().equals(newMessages.get(i).sender()))
				{
					chatSessions.get(j).addMessage(newMessages.get(i));
					found = true;
				}
			}

			if(!found)
			{
				RAIMChatSession newSession = new RAIMChatSession(newMessages.get(i).sender());
				chatSessions.add(newSession);
				newSession.addMessage(newMessages.get(i));

				chatTabbedPane.addTab(newMessages.get(i).sender(),
						new RAIMChatTabPanel(api, this, usernameTextField.getText(),
							newMessages.get(i).sender()));
			}
		}

		chatDialog.setVisible(true);
		chatDialog.requestFocus();

		for(int i = 0; i < chatSessions.size(); i++)
		{
			if(chatSessions.get(i).messageOutstanding())
			{
				boolean found = false;

				for(int j = 0; !found && j < chatTabbedPane.getTabCount(); j++)
				{
					if(chatSessions.get(i).chattingWith().equals(
							chatTabbedPane.getTitleAt(j)))
					{
						chatTabbedPane.setSelectedIndex(j);

						((RAIMChatTabPanel) chatTabbedPane.getComponentAt(i)).setPastMessagesText(chatSessions.get(
								i).getAllMessages());

						found = true;
					}
				}
			}
		}
	}

	/**
	 * Adds a message from a particular user to the chat window.
	 *
	 * @param fromUser The username of the sender user.
	 * @param toUser The username of the recipient user.
	 * @param message The message to be displayed.
	 * @param timestamp The timestamp of the message from the server.
	 */
	public void addMessageFromUser(String fromUser, String toUser, String message)
	{
		for(int i = 0; i < chatSessions.size(); i++)
		{
			if(chatSessions.get(i).chattingWith().equals(toUser))
			{
				chatSessions.get(i).addMessage(new RAIMChatMessage(fromUser, message, false));

				for(int j = 0; j < chatTabbedPane.getTabCount(); j++)
				{
					if(chatSessions.get(i).chattingWith().equals(chatTabbedPane.getTitleAt(j)))
					{
						((RAIMChatTabPanel) chatTabbedPane.getComponentAt(i)).setPastMessagesText(chatSessions.get(
								i).getAllMessages());

						break;
					}
				}

				break;
			}
		}
	}

	/**
	 * Start up the API
	 *
	 * @throws RAIMException
	 */
	protected void connectToServer() throws RAIMException
	{
		loginStatusTextField.setText("Connecting to server");

		// Connect and bind to api
		api = new RAIMClientAPI();
		api.addBuddyHandler(this);
		api.addLogonHandler(this);
		api.addMessageHandler(this);

		loginStatusTextField.setText("Connected to server");
	}

	/**
	 * Adds a new chat tab to the chat window for the specified user.
	 *
	 * @param userToAdd The username of the new user to chat with.
	 */
	private void addChatTab(String userToAdd)
	{
		int foundIndex = -1;

		for(int i = 0; i < chatTabbedPane.getTabCount(); i++)
		{
			if(chatTabbedPane.getTitleAt(i).equals(userToAdd))
			{
				foundIndex = i;
			}
		}

		if(foundIndex != -1)
		{
			chatTabbedPane.setSelectedIndex(foundIndex);
		}
		else
		{
			try
			{
				chatTabbedPane.addTab(userToAdd, new RAIMChatTabPanel(api, this,
																	  usernameTextField.getText(),
																	  userToAdd));
			}
			catch(NullPointerException ex)
			{
			}
			chatSessions.add(new RAIMChatSession(userToAdd));
			chatTabbedPane.setSelectedIndex(chatTabbedPane.getTabCount() - 1);
		}
	}

	private void login()
	{
		loginStatusTextField.setText("Connecting " + usernameTextField.getText() + " ...");
		String enteredPassword = String.valueOf(passwordTextField.getPassword());
		passwordTextField.setText("");

		// Can't pass an empty password or user name
		if(usernameTextField.getText().isEmpty())
		{
			loginStatusTextField.setText("Please enter your user name");
			return;
		}
		if(enteredPassword.isEmpty())
		{
			loginStatusTextField.setText("Please enter your password");
			return;
		}

		// Tell api to start login
		api.login(usernameTextField.getText(), enteredPassword);
	}

	public void loginSucceededHandler(String user)
	{
		loggedInUsernameLabel.setText("RAIM - " + usernameTextField.getText());

		loginPanel.setVisible(false);
		registerPanel.setVisible(false);
		editProfilePanel.setVisible(false);
		buddyListPanel.setVisible(true);

		if(chattersList.getSelectedIndex() != -1)
		{
			chatButton.setEnabled(true);
		}
		else
		{
			chatButton.setEnabled(false);
		}
	}

	public void loginFailedHandler(String user)
	{
		loginStatusTextField.setText("Invalid credentials");
	}

	public void messageReceivedHandler(String from, String to, String msg)
	{
		newMessages.add(new RAIMChatMessage(from, msg, true));
		this.checkForNewMessages();
	}

	public void buddyOnlineHandler(String user)
	{
		chatters.add(user);
		updateAvailableChatters();
	}

	public void buddyOfflineHandler(String user)
	{
		// Find the chatter with this name (can't do a by-object removal)
		for(int i = 0; i < chatters.size(); i++)
		{
			if(chatters.get(i).equals(user))
			{
				chatters.remove(i);
				break;
			}
		}
		
		updateAvailableChatters();
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buddyListPanel;
    private javax.swing.JButton cancelPasswordChangeButton;
    private javax.swing.JButton cancelRegisterButton;
    private javax.swing.JSeparator changePasswordSeparator1;
    private javax.swing.JSeparator changePasswordSeparator2;
    private javax.swing.JButton chatButton;
    private javax.swing.JDialog chatDialog;
    private javax.swing.JPanel chatTabPanel;
    private javax.swing.JList chattersList;
    private javax.swing.JScrollPane chattersScrollPane;
    private javax.swing.JSeparator connectSeparator1;
    private javax.swing.JLabel currentPasswordLabel;
    private javax.swing.JPasswordField currentPasswordTextField;
    private javax.swing.JButton editProfileButton;
    private javax.swing.JLabel editProfileLabel;
    private javax.swing.JPanel editProfilePanel;
    private javax.swing.JTextField editProfileStatusTextField;
    private javax.swing.JLabel loggedInUsernameLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JSeparator loginSeparator1;
    private javax.swing.JSeparator loginSeparator2;
    public javax.swing.JTextField loginStatusTextField;
    private javax.swing.JLabel logingLabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField newPasswordTextField;
    private javax.swing.JButton newUserButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JButton registerMeButton;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JLabel registerPasswordLabel;
    private javax.swing.JPasswordField registerPasswordTextField;
    private javax.swing.JLabel registerRetypePasswordLabel;
    private javax.swing.JSeparator registerSeparator1;
    private javax.swing.JSeparator registerSeparator2;
    private javax.swing.JTextField registerStatusTextField;
    private javax.swing.JLabel registerUsernameLabel;
    private javax.swing.JTextField registerUsernameTextField;
    private javax.swing.JLabel retypeNewPasswordLabel;
    private javax.swing.JPasswordField retypeNewPasswordTextField;
    private javax.swing.JPasswordField retypeRegisterPasswordTextField;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JLabel usernameLabel;
    protected javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

}
